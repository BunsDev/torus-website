version: 2
job_common_node: &job_common_node
  docker:
    - image: circleci/node
  working_directory: ~/torus-website/app
job_common_base: &job_common_base
  docker:
    - image: skyuppercut/buildpack-deps
  working_directory: ~/torus-website/app
job_common: &job_common
  docker:
    - image: skyuppercut/node-puppeteer
  working_directory: ~/torus-website/app
step_save_cache: &step_save_cache
  save_cache:
    key: dependency-cache-{{ checksum "package.json" }}
    paths:
      - node_modules
step_restore_cache: &step_restore_cache
  restore_cache:
    key: dependency-cache-{{ checksum "package.json" }}
step_setup_global_packages: &step_setup_global_packages
  run:
    name: "Set up global packages"
    command: |
      [ ! -d "node_modules" ] && rm package-lock.json && npm install && find ./node_modules/ -name ".git" -type d -exec rm -rf {} + || echo "node_modules exist"
update_lambda_job: &update_lambda_job
  <<: *job_common
  steps:
    - attach_workspace:
        at: ~/
    - add_ssh_keys
    - run:
        name: "Update lambda version"
        command: |
          mkdir -p ~/.ssh 
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          . ./scripts/updateLambda.sh
update_iframeIntegrity: &update_iframeIntegrity
  <<: *job_common_node
  steps:
    - attach_workspace:
        at: ~/
    - add_ssh_keys
    - run:
        name: "Update iframe integrity"
        command: |
          mkdir -p ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          . ./scripts/updateIframeIntegrity.sh
deploy_function: &deploy_function
  <<: *job_common_base
  steps:
    - attach_workspace:
        at: ~/
    - add_ssh_keys
    - run:
        name: "Deploy Over SSH to AWS"
        command: |
          . ./scripts/uploadToAws.sh
jobs:
  test-coverage:
    <<: *job_common
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Running unit tests with coverage"
          command: npm run test:coverage-codecov
      - <<: *step_save_cache
      # Save coverage artifacts
      - store_artifacts:
          path: ~/torus-website/app/coverage
  build:
    <<: *job_common
    resource_class: large
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Build code for torus website"
          command: |
            npm version patch -m 'Updating version to %s [skip ci]' && npm run build && . ./scripts/gitPush.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - torus-website
      - <<: *step_save_cache
  build-binance:
    <<: *job_common
    resource_class: large
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Build code for torus binance website"
          command: |
            npm version patch -m 'Updating version to %s [skip ci]' && npm run build:binance && . ./scripts/gitPush.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - torus-website
      - <<: *step_save_cache
  deploy:
    <<: *deploy_function
  deploy-binance:
    <<: *deploy_function
  update-lambda:
    <<: *update_lambda_job
  update-lambda-binance:
    <<: *update_lambda_job
  update-iframeIntegrity:
    <<: *update_iframeIntegrity
  update-iframeIntegrity-binance:
    <<: *update_iframeIntegrity
  build-testing:
    <<: *job_common
    resource_class: large
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Build code for torus testing website"
          command: |
            npm run build:testing
      - persist_to_workspace:
          root: ~/
          paths:
            - torus-website/app/dist
      - <<: *step_save_cache
  build-lrc:
        <<: *job_common
        resource_class: large
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus lrc website"
              command: |
                npm run build:lrc
          - persist_to_workspace:
              root: ~/
              paths:
                - torus-website/app/dist
          - <<: *step_save_cache
  deploy-testing:
    <<: *job_common_base
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys
      - run:
          name: "Deploy Over SSH"
          command: |
            ssh-keyscan -H testing.tor.us >> ~/.ssh/known_hosts
            tar czf - dist/ | ssh ubuntu@testing.tor.us "rm -rf ~/testing-torus-website/* && tar -zxf - -C ~/testing-torus-website/"
  deploy-lrc:
    <<: *job_common_base
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys
      - run:
          name: "Deploy Over SSH"
          command: |
            ssh-keyscan -H lrc.tor.us >> ~/.ssh/known_hosts
            tar czf - dist/ | ssh ubuntu@lrc.tor.us "rm -rf ~/lrc-torus-website/* && tar -zxf - -C ~/lrc-torus-website/"
# ------------------------
# alpha configurations
# ------------------------
  build-alpha:
        <<: *job_common
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus alpha website"
              command: |
                npm run build:alpha
          - persist_to_workspace:
              root: ~/
              paths:
                - torus-website/app/dist
          - <<: *step_save_cache
  build-alpha1:
        <<: *job_common
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus alpha1 website"
              command: |
                npm run build:alpha1
          - persist_to_workspace:
              root: ~/
              paths:
                - torus-website/app/dist
          - <<: *step_save_cache
  build-alpha2:
        <<: *job_common
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus alpha2 website"
              command: |
                npm run build:alpha2
          - persist_to_workspace:
              root: ~/
              paths:
                - torus-website/app/dist
          - <<: *step_save_cache
  build-alpha3:
        <<: *job_common
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus alpha3 website"
              command: |
                npm run build:alpha3
          - persist_to_workspace:
              root: ~/
              paths:
                - torus-website/app/dist
          - <<: *step_save_cache
  build-alpha4:
        <<: *job_common
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus alpha4 website"
              command: |
                npm run build:alpha4
          - persist_to_workspace:
              root: ~/
              paths:
                - torus-website/app/dist
          - <<: *step_save_cache
  build-alpha5:
        <<: *job_common
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus alpha5 website"
              command: |
                npm run build:alpha5
          - persist_to_workspace:
              root: ~/
              paths:
                - torus-website/app/dist
          - <<: *step_save_cache
# ------------------------
# alpha configurations
# ------------------------

workflows:
  version: 2
  commit:
    jobs:
      - test-coverage
      - build:
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - build
            - test-coverage
          filters:
            branches:
              only:
                - master
      - update-lambda:
          requires:
            - deploy
          filters:
            branches:
              only:
                - master
      - update-iframeIntegrity:
          requires:
            - deploy
          filters:
            branches:
              only:
                - master
      - build-binance:
          filters:
            branches:
              only:
                - binance
      - deploy-binance:
          requires:
            - build-binance
            - test-coverage
          filters:
            branches:
              only:
                - binance
      - update-lambda-binance:
          requires:
            - deploy-binance
          filters:
            branches:
              only:
                - binance
      - update-iframeIntegrity-binance:
          requires:
            - deploy-binance
          filters:
            branches:
              only:
                - binance
      - build-testing:
          filters:
            branches:
              only:
                - develop
      - deploy-testing:
          requires:
            - build-testing
            - test-coverage
          filters:
            branches:
              only:
                - develop
      - build-lrc:
          filters:
            branches:
              only:
                - develop
      - deploy-lrc:
          requires:
            - build-lrc
            - test-coverage
          filters:
            branches:
              only:
                - develop
# ------------------------
# alpha configurations
# ------------------------
      - build-alpha:
          filters:
            branches:
              only:
                - alpha
      - deploy-alpha:
          requires:
            - build-alpha
            - test-coverage
          filters:
            branches:
              only:
                - alpha
      - build-alpha1:
          filters:
            branches:
              only:
                - alpha1
      - deploy-alpha1:
          requires:
            - build-alpha1
            - test-coverage
          filters:
            branches:
              only:
                - alpha1
      - build-alpha2:
          filters:
            branches:
              only:
                - alpha2
      - deploy-alpha2:
          requires:
            - build-alpha2
            - test-coverage
          filters:
            branches:
              only:
                - alpha2
      - build-alpha3:
          filters:
            branches:
              only:
                - alpha3
      - deploy-alpha3:
          requires:
            - build-alpha3
            - test-coverage
          filters:
            branches:
              only:
                - alpha3
      - build-alpha4:
          filters:
            branches:
              only:
                - alpha4
      - deploy-alpha4:
          requires:
            - build-alpha4
            - test-coverage
          filters:
            branches:
              only:
                - alpha4
      - build-alpha5:
          filters:
            branches:
              only:
                - alpha5
      - deploy-alpha5:
          requires:
            - build-alpha5
            - test-coverage
          filters:
            branches:
              only:
                - alpha5
# ------------------------
# alpha configurations
# ------------------------
